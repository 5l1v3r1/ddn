{"remainingRequest":"/Users/imfly/.config/yarn/global/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/imfly/.config/yarn/global/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/imfly/.config/yarn/global/node_modules/source-map-loader/index.js!/Users/imfly/Documents/projects/DDN/ddn/doc/packages/ddn.md","dependencies":[{"path":"/Users/imfly/Documents/projects/DDN/ddn/doc/packages/ddn.md","mtime":1582123146256},{"path":"/Users/imfly/.config/yarn/global/node_modules/cache-loader/dist/cjs.js","mtime":1582079935672},{"path":"/Users/imfly/.config/yarn/global/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1558241367164},{"path":"/Users/imfly/.config/yarn/global/node_modules/@mdx-js/loader/index.js","mtime":1582079935489},{"path":"/Users/imfly/.config/yarn/global/node_modules/source-map-loader/index.js","mtime":1571022483528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/imfly/Documents/projects/DDN/ddn/doc/packages/ddn.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6FAA+B;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA/B,gDAAyF;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAzF,sMAA4K;AAAY,IAAA,UAAU,EAAC,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA5K,MAJK,EAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+gHAAL,CALK,CAAP;AAiED;;;;;;;;;;;;;AAED;AACAD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAjFMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"ddn-命令行工具\"\n    }}>{`DDN 命令行工具`}</h1>\n    <p>{`从 DDN v3.0.0 以后，我们的命令行工具`}<inlineCode parentName=\"p\">{`ddn`}</inlineCode>{`名称正式更改为`}<inlineCode parentName=\"p\">{`ddn`}</inlineCode>{`，也就是说，通过命令行操作的命令与实际运行的程序将保持一次，都是`}<inlineCode parentName=\"p\">{`ddn`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`imflydeMacBook:ddn imfly$ ddn\nUsage:  [options] [command]\n\nOptions:\n  -V, --version                          output the version number\n  -H, --host <host>                      Specify the hostname or ip of the node, default: 127.0.0.1 (default: \"127.0.0.1\")\n  -P, --port <port>                      Specify the port of the node, default: 8001 (default: 8001)\n  -M, --main                             Specify the mainnet, default: false\n  -h, --help                             output usage information\n\nCommands:\n  getHeight                              get block height\n  getBlockstatus                         get block status\n  openAccount [secret]                   open your account and get the infomation by secret\n  openAccountByPublickey [publickey]     open your account and get the infomation by publickey\n  getBalance [address]                   get balance by address\n  getAccount [address]                   get account by address\n  getVotedDelegates [options] [address]  get delegates voted by address\n  getDelegatesCount                      get delegates count\n  getDelegates [options]                 get delegates\n  getVoters [publicKey]                  get voters of a delegate by public key\n  getDelegateByPublickey [publicKey]     get delegate by public key\n  getDelegateByUsername [username]       get delegate by username\n  getBlocks [options]                    get blocks\n  getBlockById [id]                      get block by id\n  getBlockByHeight [height]              get block by height\n  getPeers [options]                     get peers\n  getUnconfirmedTransactions [options]   get unconfirmed transactions\n  getTransactions [options]              get transactions\n  getTransaction [id]                    get transactions\n  sendToken [options]                    send token to some address\n  sendAsset [options]                    send asset to some address\n  registerDelegate [options]             register delegate\n  listDiffVotes [options]                list the votes each other\n  upVote [options]                       vote for delegates\n  downVote [options]                     cancel vote for delegates\n  setSecondsecret [options]              set second secret\n  registerDapp [options]                 register a dapp\n  deposit [options]                      deposit assets to an app\n  dappTransaction [options]              create a dapp transaction\n  lock [options]                         lock account transfer\n  getFullBlockById [id]                  get full block by block id\n  getFullBlockByHeight [height]          get full block by block height\n  getTransactionBytes [options]          get transaction bytes\n  getTransactionId [options]             get transaction id\n  getBlockBytes [options]                get block bytes\n  getBlockPayloadHash [options]          get block bytes\n  getBlockId [options]                   get block id\n  verifyBytes [options]                  verify bytes/signature/publickey\n  generate|g <asset> <name>              generate new blockchain\n  contract [options]                     contract operations\n  crypto [options]                       crypto operations\n  dapps [options]                        manage your dapps\n  createGenesis [options]                create genesis block\n  peerStat                               analyze block height of all peers\n  delegateStat                           analyze delegates status\n  ipStat                                 analyze peer ip info\n  createUsers [options]                  create some accounts\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]}]}